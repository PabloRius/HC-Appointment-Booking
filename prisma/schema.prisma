// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output = "../node_modules/.prisma/client"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id              String          @id @default(auto()) @map("_id") @db.ObjectId

  loginId         String          @unique
  password        String

  role            String

  patientProfile  PatientProfile?
  doctorProfile   DoctorProfile?

  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
}

model PatientProfile {
  id              String          @id @default(auto()) @map("_id") @db.ObjectId

  user            User            @relation(fields: [userId], references: [id])
  userId          String          @unique @db.ObjectId

  email           String          @unique
  phone           String

  name            String
  dateOfBirth     DateTime
  gender          String
  address         String?

  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  appointments    Appointment[]
  records         EHRRecord[]
}

model DoctorProfile {
  id              String          @id @default(auto()) @map("_id") @db.ObjectId

  user            User            @relation(fields: [userId], references: [id])
  userId          String          @unique @db.ObjectId

  email           String          @unique

  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  name            String
  phone           String
  gender          String
  specialty       String

  appointments    Appointment[]
  availability    DoctorAvailability[]
  createdRecords  EHRRecord[]
}

model Appointment {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  status      String     // "confirmed", "CANCELLED", "COMPLETED"
  notes       String?
  startTime   DateTime
  endTime     DateTime
  
  doctor      DoctorProfile @relation(fields: [doctorId], references: [id])
  doctorId    String     @db.ObjectId
  
  patient     PatientProfile @relation(fields: [patientId], references: [id])
  patientId   String     @db.ObjectId
  
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model EHRRecord {
  id             String         @id @default(auto()) @map("_id") @db.ObjectId

  title          String
  description    String?

  patient       PatientProfile  @relation(fields: [patientId], references: [id])
  patientId     String          @db.ObjectId

  createdBy      DoctorProfile  @relation(fields: [doctorId], references: [id])
  doctorId       String         @db.ObjectId

  createdAt      DateTime       @default(now())
}

model DoctorAvailability {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  doctor       DoctorProfile @relation(fields: [doctorId], references: [id])
  doctorId     String        @db.ObjectId
  
  // Recurring availability pattern
  dayOfWeek    Int           // 0-6 (Sunday-Saturday)
  startHour    Int           // 8 for 8:00 AM
  startMinute  Int           // 0 or 30
  endHour      Int           // 17 for 5:00 PM
  endMinute    Int
  
  // Recurrence rules
  isRecurring  Boolean       @default(true)
  recurrence   String?       // "weekly", "biweekly", "monthly"
  validFrom    DateTime      @default(now())
  validUntil   DateTime?     // Null means indefinitely
  
  // Exceptions (blocked times)
  exceptions   Exception[]
  
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Exception {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  availability DoctorAvailability @relation(fields: [availabilityId], references: [id])
  availabilityId String      @db.ObjectId
  
  date         DateTime      // Date of exception
  startTime    DateTime?     // Null means whole day
  endTime      DateTime?
  isBlocked    Boolean       @default(true) // false for special availability
  
  reason       String?
  
  createdAt    DateTime      @default(now())
}
