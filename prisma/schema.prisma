// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output = "../node_modules/.prisma/client"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id              String          @id @default(auto()) @map("_id") @db.ObjectId

  loginId         String          @unique
  password        String

  role            String

  patientProfile  PatientProfile?
  doctorProfile   DoctorProfile?

  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
}

model PatientProfile {
  id              String          @id @default(auto()) @map("_id") @db.ObjectId

  user            User            @relation(fields: [userId], references: [id])
  userId          String          @unique @db.ObjectId

  email           String          @unique
  phone           String

  name            String
  dateOfBirth     DateTime
  gender          String
  address         String?

  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  appointments    Appointment[]
  records         EHRRecord[]
}

model DoctorProfile {
  id              String          @id @default(auto()) @map("_id") @db.ObjectId

  user            User            @relation(fields: [userId], references: [id])
  userId          String          @unique @db.ObjectId

  email           String          @unique

  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  name            String
  phone           String
  gender          String

  timeslots       Timeslot[]
  createdRecords  EHRRecord[]
}

model Appointment {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId

  status        String
  notes         String?

  timeslot      Timeslot        @relation(fields: [timeslotId], references: [id])
  timeslotId    String          @unique @db.ObjectId

  patient       PatientProfile  @relation(fields: [patientId], references: [id])
  patientId     String          @db.ObjectId
}

model Timeslot {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  
  startTime     DateTime
  endTime       DateTime

  appointment   Appointment?
  
  doctor        DoctorProfile   @relation(fields: [doctorId], references: [id])
  doctorId      String          @db.ObjectId
}

model EHRRecord {
  id             String         @id @default(auto()) @map("_id") @db.ObjectId

  title          String
  description    String?

  patient       PatientProfile  @relation(fields: [patientId], references: [id])
  patientId     String          @db.ObjectId

  createdBy      DoctorProfile  @relation(fields: [doctorId], references: [id])
  doctorId       String         @db.ObjectId

  createdAt      DateTime       @default(now())
}
